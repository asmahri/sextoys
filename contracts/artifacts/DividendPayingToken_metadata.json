{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weiAmount",
						"type": "uint256"
					}
				],
				"name": "DividendWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weiAmount",
						"type": "uint256"
					}
				],
				"name": "DividendsDistributed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "accumulativeDividendOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "distributeDividends",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "dividendOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalDividendsDistributed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawDividend",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "withdrawableDividendOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "withdrawnDividendOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Roger Wu (https://github.com/roger-wu)",
			"details": "A mintable ERC20 token that allows anyone to pay and distribute ether  to token holders as dividends and allows token holders to withdraw their dividends.  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code",
			"kind": "dev",
			"methods": {
				"accumulativeDividendOf(address)": {
					"details": "accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner) = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude",
					"params": {
						"_owner": "The address of a token holder."
					},
					"returns": {
						"_0": "The amount of dividend in wei that `_owner` has earned in total."
					}
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"distributeDividends()": {
					"details": "It reverts if the total supply of tokens is 0. It emits the `DividendsDistributed` event if the amount of received ether is greater than 0. About undistributed ether:   In each distribution, there is a small amount of ether not distributed,     the magnified amount of which is     `(msg.value * magnitude) % totalSupply()`.   With a well-chosen `magnitude`, the amount of undistributed ether     (de-magnified) in a distribution can be less than 1 wei.   We can actually keep track of the undistributed ether in a distribution     and try to distribute it in the next distribution,     but keeping track of such data on-chain costs much more than     the saved ether, so we don't do that."
				},
				"dividendOf(address)": {
					"params": {
						"_owner": "The address of a token holder."
					},
					"returns": {
						"_0": "The amount of dividend in wei that `_owner` can withdraw."
					}
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
				},
				"withdrawDividend()": {
					"details": "It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0."
				},
				"withdrawableDividendOf(address)": {
					"params": {
						"_owner": "The address of a token holder."
					},
					"returns": {
						"_0": "The amount of dividend in wei that `_owner` can withdraw."
					}
				},
				"withdrawnDividendOf(address)": {
					"params": {
						"_owner": "The address of a token holder."
					},
					"returns": {
						"_0": "The amount of dividend in wei that `_owner` has withdrawn."
					}
				}
			},
			"title": "Dividend-Paying Token",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"accumulativeDividendOf(address)": {
					"notice": "View the amount of dividend in wei that an address has earned in total."
				},
				"distributeDividends()": {
					"notice": "Distributes ether to token holders as dividends."
				},
				"dividendOf(address)": {
					"notice": "View the amount of dividend in wei that an address can withdraw."
				},
				"withdrawDividend()": {
					"notice": "Withdraws the ether distributed to the sender."
				},
				"withdrawableDividendOf(address)": {
					"notice": "View the amount of dividend in wei that an address can withdraw."
				},
				"withdrawnDividendOf(address)": {
					"notice": "View the amount of dividend in wei that an address has withdrawn."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DividendPayingToken.sol": "DividendPayingToken"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Context.sol": {
			"keccak256": "0x8d5d03134ef9068ba2f2d0cc95fac54d754935be86c48cd6eac8988dc6944b97",
			"license": "MIT",
			"urls": [
				"bzz-raw://98c61615d89b26f42e91e03e3b52eda7d8385c33e4dae7f2669ac9f3b517e2e1",
				"dweb:/ipfs/QmWY2HqkqkMBwJJyAVY5BRm8n2HSHubFoJJHr9GJRQ6pmH"
			]
		},
		"contracts/DividendPayingToken.sol": {
			"keccak256": "0x6d679847469e3ab6aebb6a3680dd23a36e182405dc5aaa1750db643733be8b78",
			"license": "MIT",
			"urls": [
				"bzz-raw://f7cd4e211d0d19dc0401824c031e09419342d422d54aac8dc4f6a7abf6267280",
				"dweb:/ipfs/QmQbJ4KHSGMjn8wFKotuX5zpFM2w2ShkYcaRPdpqs7yoa2"
			]
		},
		"contracts/DividendPayingTokenInterface.sol": {
			"keccak256": "0x5ca5882d8d22eb0c27f693b0616af5d66ab261c7abd9ea4db10b42479cb4b113",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a72941d6f4147b1d7f47b2a92c52fffbb61c2fbe0a6d8d8f04e1038a7410e52",
				"dweb:/ipfs/QmVpnMJzvHMzL4ZyBX8wV3mrP4teRKbC3oHsjSZkYCnF5W"
			]
		},
		"contracts/DividendPayingTokenOptionalInterface.sol": {
			"keccak256": "0x20c64d03b98afcb8a086e07c8a3f656308b363188f33876601e4f129a480e03a",
			"license": "MIT",
			"urls": [
				"bzz-raw://352b3c1cd6cc272cdd0989bb32981e57a07e5e82cb9fffab0db8be830bf37d42",
				"dweb:/ipfs/QmZbB8kJn24UnZsk3z8rAFTBVh5QETQGwJqEtXYYCL8ztE"
			]
		},
		"contracts/ERC20.sol": {
			"keccak256": "0x3ed10dcb79b67b3d299426af762716b11fb2ed1825a47775ffa28a83a7c506de",
			"license": "MIT",
			"urls": [
				"bzz-raw://d08139e5bef15cabbae79a075453262061053efbbf78bd51e4c76f2a0ffacb6c",
				"dweb:/ipfs/QmQ5TKcN2nojiVY3YMW7HN9vfumho3SWfzvXP4qksqTHWP"
			]
		},
		"contracts/IERC20.sol": {
			"keccak256": "0x72acfb6971c831030b4a7e4de4f04774b0b1a593f746c67d82c84451f07846b0",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ab14d0deb3ec6d653e2e52b98fac1fc567c1bc6baa5cfcfe9d5eb7857601160",
				"dweb:/ipfs/Qmd3tHzLbf5dMHtmeqJ9cx5Hir1roaipYrJYshPQqpeGZD"
			]
		},
		"contracts/IERC20Metadata.sol": {
			"keccak256": "0x8a8584e9eacfc5556727431812aa8835a0a63e686096983a9262abdb9ed9a723",
			"license": "MIT",
			"urls": [
				"bzz-raw://53084705e037bd5ffc3354f37b59530b39cea9cbe8eef2dc9d36bb90596ed8b0",
				"dweb:/ipfs/QmcHzNiAuyhDs4fawRPis69GScenfHEAxYMEwXeqX6Fqv7"
			]
		},
		"contracts/SafeMath.sol": {
			"keccak256": "0x13a3e8b21617f3813f5aa7fdfcc7a30276c7ea8d14051337db6f82aa7e2937ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://f4fe44ffc35c32706cfcca673c877fd9c36faefa226bec317a164d5972c838ae",
				"dweb:/ipfs/QmUA7joLKkmvisTdUnAT6tnMdNzkCav9XgsvHEYhR4s12q"
			]
		},
		"contracts/SafeMathInt.sol": {
			"keccak256": "0x8c10febb781620396127a64bbc11381e839197b4f23c25815dcb06a471bc317f",
			"license": "MIT",
			"urls": [
				"bzz-raw://7af1988143bbbfc314b086131ef4eb0bd33e9db9a1a8bab09d2e63a7781ecbb9",
				"dweb:/ipfs/QmSodsPDkak2y1Bk6BRpEQpSafDGbfZeDv9C3si19yCidC"
			]
		},
		"contracts/SafeMathUint.sol": {
			"keccak256": "0xf08ce8381f97126bc8169173510f65d65ff92b2c02ee3800dde15fc223a20690",
			"license": "MIT",
			"urls": [
				"bzz-raw://9429643e7312b662a2e336a6ac05b5ea6296127a3a9229bf6d0bfc5ea9f6c78d",
				"dweb:/ipfs/QmaZ93QkQ6nPwTNHhdqBiUMUz662n3yeR7EqQcZqpZ1cB9"
			]
		}
	},
	"version": 1
}